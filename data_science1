%matplotlib notebook
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


df = pd.read_csv('./athletes.csv', parse_dates=['date_of_birth'])

df.head()

f = df[df['sex'] == 'female']

m = df[df['sex'] == 'male']

tennis_f = f[f['sport'] == 'tennis']
tennis_m = m[m['sport'] == 'tennis']
gym_f = f[f['sport'] == 'gymnastics']
gym_m = m[m['sport'] == 'gymnastics']

fig, ax = plt.subplots()
plots = [
    (tennis_f, 'silver', 'tennis, women'),
    (tennis_m, 'red', 'tennis, men'),
    (gym_f, 'gold', 'Gymnastics, women'),
    (gym_m, 'green', 'Gymnastics, men')
    
]

for df, color, label in plots:
    df.plot.scatter(ax=ax, x='weight', y='height', alpha=.25, color=color, label=label)
    
ax.set_xlabel('Weight (kg)')
ax.set_ylabel('Height (m)')
ax.set_title('height and weigh of olimpic athlethes')


fig, ax = plt.subplots()
gym_m.plot.scatter(ax=ax, x='height', y='weight', c='bronze', colormap='plasma')

plt.style.use('seaborn-pastel')

df = pd.read_csv('./sales.csv', parse_dates = ['Date'])

df.info()

df['month'] = df['Date'].dt.month
df.head()

g = df.groupby(['month', 'Product'])['Amount'].sum()
g = g.unstack()
revenue = g.fillna(0).cumsum()  
revenue

fig.ax = plt.subplots()
revenue.plot.area(title='Revenue 2019 (EUR)',ax=ax)

df = pd.read_csv('./athletes.csv')

top = df.groupby('nationality')[['gold', 'silver', 'bronze']]\
.sum().sort_values('gold', ascending=False)\
.head(10)
top

fig, ax = plt.subplots()
top.plot.bar(ax=ax, stacked=True, color=['gold', 'silver', 'brown'])
fig.tight_layout()



%matplotlib inline
import pandas as pd
import matplotlib.pyplot as plt

%matplotlib inline

import pandas as pd

import matplotlib.pyplot as plt
Type Markdown and LaTeX: ùõº2

grades = pd.DataFrame([[6, 4, 5], [7, 8, 8], [6, 7, 5], [6, 5, 7],

                       [5, 2, 6]], 

                       index = ['Mary', 'John', 'Ann', 'Pete', 'Laura'],

                       columns = ['test_1', 'test_2', 'test_3'])

ax = grades.mean().plot(title="Average test score")


ax = grades.mean(axis=1).plot.bar(title="Aver")


ax = grades.mean(axis=1).plot.barh(title="Aver")   




grades['avg'] = grades.mean(axis=1)

grades.loc['whole class'] = grades.mean()


ax = grades.mean(axis=1).plot.barh(title="All test") 

grades_t

grades_t = grades.T
grades_t.drop(columns=['whole class'], inplace=True)
grades_t.drop('avg',inplace=True)

ax =grades_t.plot(title'student')

df = pd.read_csv('./water.csv')

df

ax = df.plot(subplots=True)

df.head()


plot_data = df.set_index(pd.to_datetime(df['datetime']))

df.head()

plot_data.head()

plot_data.drop(columns='datetime', inplace=True)
plot_data.head()

plot_data.index.name = "Date/Time"

plot_data.rename(columns={'height': "Heights (cm)"}, inplace=True) 

plot_data

ax = plot_data['Heights (cm)'].plot(title="Water", legend=True)


df = pd.read_csv('./water.csv')


fig, ax = plt.subplots()
df['height'].plot(ax=ax)

ax.set_title("Example")



ax.axhline(0, linestyle= '--', color='green', alpha=.25)
ax.axvline(0, linestyle= '--', color='peru', alpha=.25)



import pandas as pd
import os

exam_data = pd.read_csv('data\exams.csv', quotechar='"')

exam_data

exam_data.mean()

math_average = exam_data['math score'].mean()
writing_average = exam_data['writing score'].mean()
reading_average = exam_data['reading score'].mean()

print((f"math avg: {math_average}"))
print((f"writing: {writing_average}"))
print((f"mreading avg: {reading_average}"))

from sklearn import preprocessing

exam_data[['math score']] = preprocessing.scale(exam_data[['math score']])
exam_data[['reading score']] = preprocessing.scale(exam_data[['reading score']])
exam_data[['writing score']] = preprocessing.scale(exam_data[['writing score']])

exam_data.head()

exam_data.mean()

# label encoder : 
le = preprocessing.LabelEncoder()
exam_data['gender'] = le.fit_transform(exam_data['gender']).astype(str)

exam_data.head()

le.classes_

pd.get_dummies(exam_data['race/ethnicity'])

exam_data = pd.get_dummies(exam_data, columns=['race/ethnicity'])

exam_data

exam_data = pd.get_dummies(exam_data, columns=['parental level of education', 'lunch', 'test preparation course'])

exam_data.head()

exam_data.shape



